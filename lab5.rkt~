;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname lab5) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t write repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp")) #f)))
(require racket/contract)

(define-struct predio (altura base pos material impactos))
;; uma estrutura do tipo predio tem o seguinte formato:
;; (make-predio a b x m i), onde:
;; a: Número, altura do prédio
;; b: Número, base do prédio
;; x: Número, posicao no eixo x do prédio
;; m: Número entre 1 e 3, material do prédio, onde 1 é o mais fŕagil, e 3 o mais resistente
;; i: Número, número de impactos que o pŕedio pode receber
;; constantes:
(define PREDIO1 (make-predio 50 20 50 1 5))
(define PREDIO2 (make-predio 70 20 100 2 0))
(define PREDIO3 (make-predio 90 30 200 3 0))

(define COR-MATERIAL1 "DarkMagenta")
(define COR-MATEIRAL2 "Pink")
(define COR-MATERIAL3 "Green")
(define CENA-INICIAL(empty-scene 500 400 "LightSkyBlue"))
(define NUVEM (ellipse 140 50 "solid" "white"))
(define SOL (circle  30 "solid" "yellow"))
(define CHAO (rectangle 1000 50 "solid" "black"))
(define CENA (place-image SOL 400 50 (place-image CHAO 0 375 CENA-INICIAL)))

;; uma lista-de-predios é:
;; 1. empty, ou
;; 2. (cons p lp), onde
;; p = predio
;; lp = lista-de-predios
;; que obedece o predicado de (listof predio?)
(define LISTAP1 (list PREDIO1 PREDIO2 PREDIO3))

;; inicializa-lista-predios: lista-de-predios -> lista-de-predios
;; inicializa os impactos de uma lista de prédios com base no material
(define/contract (inicializa-lista-predios listap)
  (-> (listof predio?) (listof predio?))
  (map inicializa-predio listap)) ;; mapeamento de função para uma lista
;; testes:

;; inicializa-predio: predios -> predios
;; iniciliza um predio, dado que o material define os impactos do prédio
;; ex:
;; (inicializa-predio PREDIO1) = (make-predio 50 20 50 1 1)
;; (inicializa-predio PREDIO3) = (make-predio 90 30 200 3 5)
(define/contract (inicializa-predio p)
  (-> predio? predio?)
  (cond
    [(= (predio-material p) 1)
     (make-predio
      (predio-altura p)
      (predio-base p)
      (predio-pos p)
      (predio-material p)
      1)]
    [(= (predio-material p) 2)
     (make-predio
      (predio-altura p)
      (predio-base p)
      (predio-pos p)
      (predio-material p)
      3)]
    [(= (predio-material p) 3)
     (make-predio
      (predio-altura p)
      (predio-base p)
      (predio-pos p)
      (predio-material p)
      5)]
    [else (error "prédio tem um material de tipo inváldio (1,2 ou 3)")]))
;; testes:
(check-expect (inicializa-predio PREDIO1) (make-predio 50 20 50 1 1))
(check-expect (inicializa-predio PREDIO3) (make-predio 90 30 200 3 5))


;; coloca-predio: predio Imagem -> Imagem
;; desenha o prédio na cena fornecida
;; ex: (coloca-predio PREDIO1 CENA) =
;;
(define/contract (coloca-predio predio cena)
  (-> predio? image? image?)
  (place-image (desenha-predio predio) (predio-pos predio) 330 cena))
;; testes

;; desenha-predio: predio -> Imagem
(define/contract (desenha-predio predio)
  (-> predio? image?)
  (overlay (rectangle (predio-base predio) (predio-altura predio) "outline" "red")
  (rectangle (predio-base predio) (predio-altura predio) "solid" (escolhe-cor predio))))
;; testes:

     
;; escolhe-cor: predio -> String
;; dado um predio, devolve a cor do material
(define/contract (escolhe-cor pr)
  (-> predio? string?)
  (cond
    ([= (predio-material pr) 1]
     COR-MATERIAL1)
    ([= (predio-material pr) 2]
     COR-MATEIRAL2)
    ([= (predio-material pr) 3]
     COR-MATERIAL3)))
;; testes:


;; desenha-lista-predios: lista-de-predios
;; desenha uma lista de predios em uma dada cena
(define/contract (desenha-lista-predios predios cena)
  (-> (listof predio?) image? image?)
  (foldr coloca-predio cena predios))

(define-struct meteoro (pos-x pos-y direcao vel material forca))
;; uma estrutura do tipo meteoro tem o seguinte formato:
;; (make-meteoro x y d v m f), onde:
;; x: Número, posicao x do meteoro
;; y: Número, posicao y do meteoro
;; d: Símbolo, representa se ele cai para a direita ou a esquerda
;; v : Número, representa a velocidade (incremento)
;; m: Número de 1 a 3, material do meteoro
;; f: Número, poder do impacto do meteoro
;; constantes:
(define METEORO1 (make-meteoro 20 0 'd 1 1 0))
(define METEORO2 (make-meteoro 50 0 'e 1 2 0))
(define METEORO3 (make-meteoro 70 0 'e 1 3 0))
;; uma lista-de-meteoros é:
;; 1. empty, ou
;; 2. (cons m lm), onde:
;; m: meteoro
;; lm: lista-de-meteoros
;; que, ainda, obedece ao predicado (listof meteoro?)



  
  